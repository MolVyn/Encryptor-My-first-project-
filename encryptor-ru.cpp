#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <thread>
#include <chrono>
#include <filesystem>
#include <cryptopp/aes.h>
#include <cryptopp/modes.h>
#include <cryptopp/filters.h>
#include <cryptopp/pwdbased.h>
#include <cryptopp/sha.h>
#include <cryptopp/hmac.h>
#include <cryptopp/osrng.h>
#include <cryptopp/hex.h>
#include <cryptopp/files.h>

using namespace CryptoPP;
namespace fs = std::filesystem;

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
void ShowProgress(int percent, const std::string& operation) {
    std::cout << "\r[" << operation << "] [";
    for (int i = 0; i < 50; i++) {
        if (i < percent / 2) std::cout << "‚ñ†";
        else std::cout << " ";
    }
    std::cout << "] " << percent << "%";
    std::cout.flush();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
void GenerateKey(const std::string& password, SecByteBlock& key, SecByteBlock& iv) {
    SecByteBlock salt(AES::BLOCKSIZE);
    AutoSeededRandomPool prng;
    prng.GenerateBlock(salt, salt.size());

    PKCS5_PBKDF2_HMAC<SHA256> pbkdf;
    pbkdf.DeriveKey(
        key, key.size(),
        0x00,
        reinterpret_cast<const byte*>(password.data()), password.size(),
        salt, salt.size(),
        100000
    );
    prng.GenerateBlock(iv, iv.size());
}

// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
std::string ReadFile(const std::string& filename) {
    std::ifstream file(filename, std::ios::binary);
    if (!file) return "";
    return std::string((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
}

// –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
void WriteFile(const std::string& filename, const std::string& data) {
    std::ofstream file(filename, std::ios::binary);
    file.write(data.data(), data.size());
}

// –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
bool EncryptFile(const std::string& inputFile, const std::string& outputFile, const std::string& password1, const std::string& password2) {
    if (!fs::exists(inputFile)) {
        std::cerr << "‚úñ –û—à–∏–±–∫–∞: —Ñ–∞–π–ª \"" << inputFile << "\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n";
        return false;
    }

    try {
        std::cout << "\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ –ù–ê–ß–ê–õ–û –®–ò–§–†–û–í–ê–ù–ò–Ø ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n";

        SecByteBlock key(AES::DEFAULT_KEYLENGTH);
        SecByteBlock iv(AES::BLOCKSIZE);

        std::string fullPassword = password1 + password2;
        GenerateKey(fullPassword, key, iv);

        std::string plaintext = ReadFile(inputFile);
        if (plaintext.empty()) {
            std::cerr << "‚úñ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π!\n";
            return false;
        }

        std::string ciphertext;
        CBC_Mode<AES>::Encryption encryptor(key, key.size(), iv);
        StringSource ss(
            plaintext, true,
            new StreamTransformationFilter(
                encryptor,
                new StringSink(ciphertext),
                BlockPaddingSchemeDef::PKCS_PADDING
            )
        );

        ciphertext.insert(0, reinterpret_cast<const char*>(iv.data()), iv.size());
        WriteFile(outputFile, ciphertext);

        for (int i = 0; i <= 100; i++) {
            ShowProgress(i, "–®–ò–§–†–û–í–ê–ù–ò–ï");
            std::this_thread::sleep_for(std::chrono::milliseconds(30));
        }

        std::cout << "\n‚úî –£—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: " << outputFile << "\n";
        std::cout << "üîê –ö–ª—é—á (HEX): ";
        StringSource(key.data(), key.size(), true, new HexEncoder(new FileSink(std::cout)));
        std::cout << "\nüîê IV (HEX): ";
        StringSource(iv.data(), iv.size(), true, new HexEncoder(new FileSink(std::cout)));
        std::cout << "\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n";
        return true;

    } catch (const CryptoPP::Exception& e) {
        std::cerr << "\n‚úñ –ö—Ä–∏–ø—Ç–æ-–æ—à–∏–±–∫–∞: " << e.what() << "\n";
        return false;
    }
}

// –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
bool DecryptFile(const std::string& inputFile, const std::string& outputFile, const std::string& password1, const std::string& password2, const std::string& keyHex, const std::string& ivHex) {
    if (!fs::exists(inputFile)) {
        std::cerr << "‚úñ –û—à–∏–±–∫–∞: —Ñ–∞–π–ª \"" << inputFile << "\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n";
        return false;
    }

    try {
        std::cout << "\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ –ù–ê–ß–ê–õ–û –†–ê–°–®–ò–§–†–û–í–ö–ò ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n";

        SecByteBlock key(AES::DEFAULT_KEYLENGTH);
        SecByteBlock iv(AES::BLOCKSIZE);

        StringSource(keyHex, true, new HexDecoder(new ArraySink(key, key.size())));
        StringSource(ivHex, true, new HexDecoder(new ArraySink(iv, iv.size())));

        std::string fullPassword = password1 + password2;

        std::string ciphertext = ReadFile(inputFile);
        if (ciphertext.size() <= AES::BLOCKSIZE) {
            std::cerr << "‚úñ –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π —Ñ–∞–π–ª!\n";
            return false;
        }

        std::string encryptedData = ciphertext.substr(iv.size());
        std::string plaintext;

        CBC_Mode<AES>::Decryption decryptor(key, key.size(), iv);
        StringSource ss(
            encryptedData, true,
            new StreamTransformationFilter(
                decryptor,
                new StringSink(plaintext),
                BlockPaddingSchemeDef::PKCS_PADDING
            )
        );

        WriteFile(outputFile, plaintext);

        for (int i = 0; i <= 100; i++) {
            ShowProgress(i, "–†–ê–°–®–ò–§–†–û–í–ö–ê");
            std::this_thread::sleep_for(std::chrono::milliseconds(30));
        }

        std::cout << "\n‚úî –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: " << outputFile << "\n";
        std::cout << "‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n";
        return true;

    } catch (const CryptoPP::Exception& e) {
        std::cerr << "\n‚úñ –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: –≤–æ–∑–º–æ–∂–Ω–æ, –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–æ–ª–µ–π –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ –∫–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n";
        std::cerr << "–ö—Ä–∏–ø—Ç–æ-–æ—à–∏–±–∫–∞: " << e.what() << "\n";
        return false;
    }
}

int main() {
    std::cout << R"(
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    )" << '\n';

    int choice;
    do {
        std::cout << "\n1. üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª\n2. üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª\n3. ‚ùå –í—ã—Ö–æ–¥\n> ";
        std::cin >> choice;
        std::cin.ignore();

        if (choice == 1) {
            std::string inputFile, outputFile, pass1, pass2;
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ";
            std::getline(std::cin, inputFile);
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ";
            std::getline(std::cin, outputFile);
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ü–ï–†–í–´–ô –ø–∞—Ä–æ–ª—å: ";
            std::getline(std::cin, pass1);
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –í–¢–û–†–û–ô –ø–∞—Ä–æ–ª—å: ";
            std::getline(std::cin, pass2);

            std::cout << "‚ö†Ô∏è –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ–±–∞ –ø–∞—Ä–æ–ª—è, –±–µ–∑ –Ω–∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!\n";
            EncryptFile(inputFile, outputFile, pass1, pass2);
        }
        else if (choice == 2) {
            std::string inputFile, outputFile, pass1, pass2, keyHex, ivHex;
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É: ";
            std::getline(std::cin, inputFile);
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ";
            std::getline(std::cin, outputFile);
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ü–ï–†–í–´–ô –ø–∞—Ä–æ–ª—å: ";
            std::getline(std::cin, pass1);
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –í–¢–û–†–û–ô –ø–∞—Ä–æ–ª—å: ";
            std::getline(std::cin, pass2);
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ö–õ–Æ–ß (HEX): ";
            std::getline(std::cin, keyHex);
            std::cout << "–í–≤–µ–¥–∏—Ç–µ IV (HEX): ";
            std::getline(std::cin, ivHex);

            DecryptFile(inputFile, outputFile, pass1, pass2, keyHex, ivHex);
        }
    } while (choice != 3);

    std::cout << "\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!\n";
    return 0;
}

